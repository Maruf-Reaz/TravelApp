using ExploitTravelApp.Data;
using ExploitTravelApp.Models.Locations;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace ExploitTravelApp.Repository.Locations
{
    public class LocationRepository
    {
        private readonly ApplicationDbContext _context;

        public LocationRepository(ApplicationDbContext context)
        {
            _context = context;
        }

        public async Task<List<Location>> GetAll()
        {
            var locations = await _context.Locations.Include(m => m.Division).ToListAsync();
            return locations;
        }

        public async Task<Location> GetById(int id)
        {
            var location = await _context.Locations.Include(m => m.Division).FirstOrDefaultAsync(m => m.Id == id);
            return location;
        }

        public async Task<int> CreateLocation(Location location)
        {
            int count = 0;
            _context.Add(location);
            count = await _context.SaveChangesAsync();
            return count;
        }

        public async Task<int> EditLocation(Location location)
        {
            int count = 0;
            _context.Update(location);
            await _context.SaveChangesAsync();
            return count;
        }

        public bool LocationExists(int id)
        {
            return _context.Locations.Any(m => m.Id == id);
        }
    }
}
