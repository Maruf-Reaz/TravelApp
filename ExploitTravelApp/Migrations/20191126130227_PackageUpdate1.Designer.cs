// <auto-generated />
using System;
using ExploitTravelApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ExploitTravelApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20191126130227_PackageUpdate1")]
    partial class PackageUpdate1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ExploitTravelApp.Models.Common.Authentication.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "f686b56a-6986-4228-a0b0-bdec547e3faf",
                            ConcurrencyStamp = "da9a3b0e-8b6f-4479-81d0-4fd255e23f15",
                            CreatedOn = new DateTime(2019, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Admin",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "w585b57c-2365-8224-c0d0-bdec765e3afa",
                            ConcurrencyStamp = "ea9a3b0f-8b6f-4479-35e0-4fd799e23f16",
                            CreatedOn = new DateTime(2019, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Agent",
                            Name = "Agent",
                            NormalizedName = "AGENT"
                        });
                });

            modelBuilder.Entity("ExploitTravelApp.Models.Common.Authentication.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<int?>("AgentStatus");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<int>("UserCategoryId");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserCategoryId");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "8ab6ee62-f36c-48b6-ae27-dbb22cbfb507",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "26d21881-0a3a-44ab-aa4d-10664ace1e2d",
                            Email = "admin1@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN1@MAIL.COM",
                            NormalizedUserName = "ADMIN1",
                            PasswordHash = "AQAAAAEAACcQAAAAEAbX7VEEyj5ZqfNsY3KolqiDANLQbqbByWtffmVGoCjwuYMAbzmLCg4THKc+DlBTsQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5TDMS5CNA2GYJK2URB4GDOCQI2NI7EHJ",
                            TwoFactorEnabled = false,
                            UserCategoryId = 3,
                            UserName = "Admin1"
                        });
                });

            modelBuilder.Entity("ExploitTravelApp.Models.Common.Authentication.UserCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("UserCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Visitor"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Agent"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("ExploitTravelApp.Models.Divisions.Division", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Divisions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Dhaka"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Sylhet"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Chittagong"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Rajshahi"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Khulna"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Barisal"
                        });
                });

            modelBuilder.Entity("ExploitTravelApp.Models.ExploitPackages.Agent", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LogoFileName");

                    b.Property<string>("Name");

                    b.Property<int?>("RatingId");

                    b.Property<int?>("TripsCompleted");

                    b.HasKey("Id");

                    b.HasIndex("RatingId");

                    b.ToTable("Agents");
                });

            modelBuilder.Entity("ExploitTravelApp.Models.ExploitPackages.ExploitPackage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AgentId")
                        .IsRequired();

                    b.Property<int?>("Days");

                    b.Property<double>("DefaultPrice");

                    b.Property<int>("ExploitPackageCategoryId");

                    b.Property<int>("LocationId");

                    b.Property<string>("Name");

                    b.Property<int?>("Nights");

                    b.Property<string>("Note");

                    b.Property<string>("PlaceName");

                    b.Property<int?>("RatingId");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("ExploitPackageCategoryId");

                    b.HasIndex("LocationId");

                    b.HasIndex("RatingId");

                    b.ToTable("ExploitPackages");
                });

            modelBuilder.Entity("ExploitTravelApp.Models.ExploitPackages.ExploitPackageCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ExploitPackageCategories");
                });

            modelBuilder.Entity("ExploitTravelApp.Models.ExploitPackages.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Ratings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "1 Star"
                        },
                        new
                        {
                            Id = 2,
                            Name = "2 Star"
                        },
                        new
                        {
                            Id = 3,
                            Name = "3 Star"
                        },
                        new
                        {
                            Id = 4,
                            Name = "4 Star"
                        },
                        new
                        {
                            Id = 5,
                            Name = "5 Star"
                        });
                });

            modelBuilder.Entity("ExploitTravelApp.Models.Locations.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Details");

                    b.Property<int>("DivisionId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("DivisionId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "8ab6ee62-f36c-48b6-ae27-dbb22cbfb507",
                            RoleId = "f686b56a-6986-4228-a0b0-bdec547e3faf"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ExploitTravelApp.Models.Common.Authentication.ApplicationUser", b =>
                {
                    b.HasOne("ExploitTravelApp.Models.Common.Authentication.UserCategory", "UserCategory")
                        .WithMany()
                        .HasForeignKey("UserCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ExploitTravelApp.Models.ExploitPackages.Agent", b =>
                {
                    b.HasOne("ExploitTravelApp.Models.ExploitPackages.Rating", "Rating")
                        .WithMany("Agents")
                        .HasForeignKey("RatingId");
                });

            modelBuilder.Entity("ExploitTravelApp.Models.ExploitPackages.ExploitPackage", b =>
                {
                    b.HasOne("ExploitTravelApp.Models.ExploitPackages.Agent", "Agent")
                        .WithMany("ExploitPackages")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ExploitTravelApp.Models.ExploitPackages.ExploitPackageCategory", "ExploitPackageCategory")
                        .WithMany("ExploitPackages")
                        .HasForeignKey("ExploitPackageCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ExploitTravelApp.Models.Locations.Location", "Location")
                        .WithMany("ExploitPackages")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ExploitTravelApp.Models.ExploitPackages.Rating", "Rating")
                        .WithMany("ExploitPackages")
                        .HasForeignKey("RatingId");
                });

            modelBuilder.Entity("ExploitTravelApp.Models.Locations.Location", b =>
                {
                    b.HasOne("ExploitTravelApp.Models.Divisions.Division", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("ExploitTravelApp.Models.Common.Authentication.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ExploitTravelApp.Models.Common.Authentication.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ExploitTravelApp.Models.Common.Authentication.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("ExploitTravelApp.Models.Common.Authentication.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ExploitTravelApp.Models.Common.Authentication.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ExploitTravelApp.Models.Common.Authentication.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
