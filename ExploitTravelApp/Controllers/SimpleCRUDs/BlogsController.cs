using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using ExploitTravelApp.Data;
using ExploitTravelApp.Models.SimpleCRUDs;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using ExploitTravelApp.Models.Common.Authentication;
using Microsoft.AspNetCore.Hosting;
using ExploitTravelApp.Models.SimpleCRUDs.ViewModels;
using ExploitTravelApp.Models.Common.File;

namespace ExploitTravelApp.Controllers.SimpleCRUDs
{
    [Authorize]
    public class BlogsController : Controller
    {
        private readonly ApplicationDbContext _context;
        private readonly UserManager<ApplicationUser> _userManager;
        private readonly IHostingEnvironment _hostingEnvironment;

        public BlogsController(ApplicationDbContext context, UserManager<ApplicationUser> userManager, IHostingEnvironment hostingEnvironment)
        {
            _context = context;
            _userManager = userManager;
            _hostingEnvironment = hostingEnvironment;
        }

        // GET: Blogs
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> Index()
        {
            var blogs = _context.Blogs.Include(b => b.Visitor).OrderByDescending(m => m.Id);
            return View(await blogs.ToListAsync());
        }

        [Authorize(Roles = "Visitor")]
        public async Task<IActionResult> GetBlogsOfVisitor(string visitorId)
        {
            var blogs = _context.Blogs.Include(b => b.Visitor).Where(m => m.VisitorId == visitorId).OrderByDescending(m => m.Id);
            return View(await blogs.ToListAsync());
        }

        // GET: Blogs/Details/5
        [Authorize(Roles = "Admin,Visitor")]
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var blog = await _context.Blogs
                .Include(b => b.Visitor)
                .FirstOrDefaultAsync(m => m.Id == id);
            if (blog == null)
            {
                return NotFound();
            }

            return View(blog);
        }

        // GET: Blogs/Create
        [Authorize(Roles = "Visitor")]
        public async Task<IActionResult> Create(string visitorId)
        {
            //ViewData["VisitorId"] = new SelectList(_context.Visitors, "Id", "Id");

            if (visitorId == null)
            {
                return NotFound();
            }

            var user = await _userManager.FindByIdAsync(visitorId);
            if (user == null)
            {
                return NotFound();
            }
            ViewData["Visitor"] = user;

            return View();
        }

        // POST: Blogs/Create
        [Authorize(Roles = "Visitor")]
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create(BlogViewModel blogViewModel)
        {
            if (ModelState.IsValid)
            {
                string photo1 = "No File";
                if (blogViewModel.Photo1 != null)
                {
                    string uniqueFileName = null;
                    string stringCutted = blogViewModel.Photo1.FileName.Split('.').Last();
                    uniqueFileName = Guid.NewGuid().ToString() + "." + stringCutted;
                    photo1 = uniqueFileName;
                    InputFile fileUpload = new InputFile(_hostingEnvironment);
                    fileUpload.Uploadfile("files/blog_images", blogViewModel.Photo1, photo1);
                }

                string photo2 = "No File";
                if (blogViewModel.Photo2 != null)
                {
                    string uniqueFileName = null;
                    string stringCutted = blogViewModel.Photo2.FileName.Split('.').Last();
                    uniqueFileName = Guid.NewGuid().ToString() + "." + stringCutted;
                    photo2 = uniqueFileName;
                    InputFile fileUpload = new InputFile(_hostingEnvironment);
                    fileUpload.Uploadfile("files/blog_images", blogViewModel.Photo2, photo2);
                }

                string photo3 = "No File";
                if (blogViewModel.Photo3 != null)
                {
                    string uniqueFileName = null;
                    string stringCutted = blogViewModel.Photo3.FileName.Split('.').Last();
                    uniqueFileName = Guid.NewGuid().ToString() + "." + stringCutted;
                    photo3 = uniqueFileName;
                    InputFile fileUpload = new InputFile(_hostingEnvironment);
                    fileUpload.Uploadfile("files/blog_images", blogViewModel.Photo3, photo3);
                }

                var blog = new Blog
                {
                    VisitorId = blogViewModel.VisitorId,
                    Title = blogViewModel.Title,
                    Description = blogViewModel.Description,
                    PhotoName1 = photo1,
                    PhotoName2 = photo2,
                    PhotoName3 = photo3
                };

                _context.Add(blog);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(GetBlogsOfVisitor), new { visitorId = blog.VisitorId });
            }
            //ViewData["VisitorId"] = new SelectList(_context.Visitors, "Id", "Id", blog.VisitorId);

            var user = await _userManager.FindByIdAsync(blogViewModel.VisitorId);
            if (user == null)
            {
                return NotFound();
            }
            ViewData["Visitor"] = user;

            return View(blogViewModel);
        }

        // GET: Blogs/Edit/5
        [Authorize(Roles = "Visitor")]
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var blog = await _context.Blogs.FirstOrDefaultAsync(m => m.Id == id);
            if (blog == null)
            {
                return NotFound();
            }

            var user = await _userManager.FindByIdAsync(blog.VisitorId);
            if (user == null)
            {
                return NotFound();
            }
            ViewData["Visitor"] = user;

            var blogViewModel = new BlogViewModel
            {
                Id = blog.Id,
                VisitorId = blog.VisitorId,
                Title = blog.Title,
                Description = blog.Description,
                OldPhotoName1 = blog.PhotoName1,
                OldPhotoName2 = blog.PhotoName2,
                OldPhotoName3 = blog.PhotoName3
            };

            //ViewData["VisitorId"] = new SelectList(_context.Visitors, "Id", "Id", blog.VisitorId);
            return View(blogViewModel);
        }

        // POST: Blogs/Edit/5
        [Authorize(Roles = "Visitor")]
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, BlogViewModel blogViewModel)
        {
            if (id != blogViewModel.Id)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                try
                {
                    InputFile fileUpload = new InputFile(_hostingEnvironment);
                    var blog = new Blog
                    {
                        Id = blogViewModel.Id,
                        VisitorId = blogViewModel.VisitorId,
                        Title = blogViewModel.Title,
                        Description = blogViewModel.Description,
                        PhotoName1 = blogViewModel.OldPhotoName1,
                        PhotoName2 = blogViewModel.OldPhotoName2,
                        PhotoName3 = blogViewModel.OldPhotoName3
                    };
                    if (blogViewModel.Photo1 != null)
                    {
                        string uniqueFileName = null;
                        string stringCutted = blogViewModel.Photo1.FileName.Split('.').Last();
                        uniqueFileName = Guid.NewGuid().ToString() + "." + stringCutted;
                        blog.PhotoName1 = uniqueFileName;
                        if (blogViewModel.OldPhotoName1.ToLower() == "no file")
                        {
                            fileUpload.Uploadfile("files/blog_images", blogViewModel.Photo1, uniqueFileName);
                        }
                        else
                        {
                            fileUpload.Updatefile("files/blog_images", blogViewModel.Photo1, blogViewModel.OldPhotoName1, uniqueFileName);
                        }
                    }
                    if (blogViewModel.Photo2 != null)
                    {
                        string uniqueFileName = null;
                        string stringCutted = blogViewModel.Photo2.FileName.Split('.').Last();
                        uniqueFileName = Guid.NewGuid().ToString() + "." + stringCutted;
                        blog.PhotoName2 = uniqueFileName;
                        if (blogViewModel.OldPhotoName2.ToLower() == "no file")
                        {
                            fileUpload.Uploadfile("files/blog_images", blogViewModel.Photo2, uniqueFileName);
                        }
                        else
                        {
                            fileUpload.Updatefile("files/blog_images", blogViewModel.Photo2, blogViewModel.OldPhotoName2, uniqueFileName);
                        }
                    }
                    if (blogViewModel.Photo3 != null)
                    {
                        string uniqueFileName = null;
                        string stringCutted = blogViewModel.Photo3.FileName.Split('.').Last();
                        uniqueFileName = Guid.NewGuid().ToString() + "." + stringCutted;
                        blog.PhotoName3 = uniqueFileName;
                        if (blogViewModel.OldPhotoName3.ToLower() == "no file")
                        {
                            fileUpload.Uploadfile("files/blog_images", blogViewModel.Photo3, uniqueFileName);
                        }
                        else
                        {
                            fileUpload.Updatefile("files/blog_images", blogViewModel.Photo3, blogViewModel.OldPhotoName3, uniqueFileName);
                        }
                    }

                    _context.Update(blog);
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!BlogExists(blogViewModel.Id))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
                return RedirectToAction(nameof(GetBlogsOfVisitor), new { visitorId = blogViewModel.VisitorId });
            }
            //ViewData["VisitorId"] = new SelectList(_context.Visitors, "Id", "Id", blog.VisitorId);

            var user = await _userManager.FindByIdAsync(blogViewModel.VisitorId);
            if (user == null)
            {
                return NotFound();
            }
            ViewData["Visitor"] = user;

            return View(blogViewModel);
        }

        // GET: Blogs/Delete/5
        //public async Task<IActionResult> Delete(int? id)
        //{
        //    if (id == null)
        //    {
        //        return NotFound();
        //    }

        //    var blog = await _context.Blogs
        //        .Include(b => b.Visitor)
        //        .FirstOrDefaultAsync(m => m.Id == id);
        //    if (blog == null)
        //    {
        //        return NotFound();
        //    }

        //    return View(blog);
        //}

        // POST: Blogs/Delete/5
        //[HttpPost, ActionName("Delete")]
        //[ValidateAntiForgeryToken]
        //public async Task<IActionResult> DeleteConfirmed(int id)
        //{
        //    var blog = await _context.Blogs.FindAsync(id);
        //    _context.Blogs.Remove(blog);
        //    await _context.SaveChangesAsync();
        //    return RedirectToAction(nameof(Index));
        //}

        private bool BlogExists(int id)
        {
            return _context.Blogs.Any(e => e.Id == id);
        }
    }
}
