using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using ExploitTravelApp.Data;
using ExploitTravelApp.Models.SimpleCRUDs;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using ExploitTravelApp.Models.Common.Authentication;
using Microsoft.AspNetCore.Hosting;

namespace ExploitTravelApp.Controllers.SimpleCRUDs
{
    [Authorize]
    public class QuotesController : Controller
    {
        private readonly ApplicationDbContext _context;
        private readonly UserManager<ApplicationUser> _userManager;
        private readonly IHostingEnvironment _hostingEnvironment;

        public QuotesController(ApplicationDbContext context, UserManager<ApplicationUser> userManager, IHostingEnvironment hostingEnvironment)
        {
            _context = context;
            _userManager = userManager;
            _hostingEnvironment = hostingEnvironment;
        }

        // GET: Quotes
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> Index()
        {
            var quotes = _context.Quotes.Include(q => q.Visitor).OrderByDescending(m => m.Id);
            return View(await quotes.ToListAsync());
        }

        [Authorize(Roles = "Visitor")]
        public async Task<IActionResult> GetQuotesOfVisitor(string visitorId)
        {
            var quotes = _context.Quotes.Include(b => b.Visitor).Where(m => m.VisitorId == visitorId).OrderByDescending(m => m.Id);
            return View(await quotes.ToListAsync());
        }

        // GET: Quotes/Details/5
        [Authorize(Roles = "Admin,Visitor")]
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var quote = await _context.Quotes
                .Include(q => q.Visitor)
                .FirstOrDefaultAsync(m => m.Id == id);
            if (quote == null)
            {
                return NotFound();
            }

            return View(quote);
        }

        // GET: Quotes/Create
        [Authorize(Roles = "Visitor")]
        public async Task<IActionResult> Create(string visitorId)
        {
            if (visitorId == null)
            {
                return NotFound();
            }

            var user = await _userManager.FindByIdAsync(visitorId);
            if (user == null)
            {
                return NotFound();
            }
            ViewData["Visitor"] = user;
            //ViewData["VisitorId"] = new SelectList(_context.Visitors, "Id", "Id");
            return View();
        }

        // POST: Quotes/Create
        [Authorize(Roles = "Visitor")]
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("Id,VisitorId,Designation,Message,Rating")] Quote quote)
        {
            if (ModelState.IsValid)
            {
                _context.Add(quote);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(GetQuotesOfVisitor), new { visitorId = quote.VisitorId });
            }
            //ViewData["VisitorId"] = new SelectList(_context.Visitors, "Id", "Id", quote.VisitorId);

            var user = await _userManager.FindByIdAsync(quote.VisitorId);
            if (user == null)
            {
                return NotFound();
            }
            ViewData["Visitor"] = user;

            return View(quote);
        }

        // GET: Quotes/Edit/5
        [Authorize(Roles = "Visitor")]
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var quote = await _context.Quotes.FindAsync(id);
            if (quote == null)
            {
                return NotFound();
            }

            var user = await _userManager.FindByIdAsync(quote.VisitorId);
            if (user == null)
            {
                return NotFound();
            }
            ViewData["Visitor"] = user;

            //ViewData["VisitorId"] = new SelectList(_context.Visitors, "Id", "Id", quote.VisitorId);
            return View(quote);
        }

        // POST: Quotes/Edit/5
        [Authorize(Roles = "Visitor")]
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, [Bind("Id,VisitorId,Designation,Message,Rating")] Quote quote)
        {
            if (id != quote.Id)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                try
                {
                    _context.Update(quote);
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!QuoteExists(quote.Id))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
                return RedirectToAction(nameof(GetQuotesOfVisitor), new { visitorId = quote.VisitorId });
            }
            //ViewData["VisitorId"] = new SelectList(_context.Visitors, "Id", "Id", quote.VisitorId);

            var user = await _userManager.FindByIdAsync(quote.VisitorId);
            if (user == null)
            {
                return NotFound();
            }
            ViewData["Visitor"] = user;

            return View(quote);
        }

        // GET: Quotes/Delete/5
        //public async Task<IActionResult> Delete(int? id)
        //{
        //    if (id == null)
        //    {
        //        return NotFound();
        //    }

        //    var quote = await _context.Quotes
        //        .Include(q => q.Visitor)
        //        .FirstOrDefaultAsync(m => m.Id == id);
        //    if (quote == null)
        //    {
        //        return NotFound();
        //    }

        //    return View(quote);
        //}

        // POST: Quotes/Delete/5
        //[HttpPost, ActionName("Delete")]
        //[ValidateAntiForgeryToken]
        //public async Task<IActionResult> DeleteConfirmed(int id)
        //{
        //    var quote = await _context.Quotes.FindAsync(id);
        //    _context.Quotes.Remove(quote);
        //    await _context.SaveChangesAsync();
        //    return RedirectToAction(nameof(Index));
        //}

        private bool QuoteExists(int id)
        {
            return _context.Quotes.Any(e => e.Id == id);
        }
    }
}
