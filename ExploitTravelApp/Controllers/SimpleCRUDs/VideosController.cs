using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using ExploitTravelApp.Data;
using ExploitTravelApp.Models.SimpleCRUDs;
using ExploitTravelApp.Models.SimpleCRUDs.ViewModels;
using Microsoft.AspNetCore.Hosting;
using ExploitTravelApp.Models.Common.File;
using Microsoft.AspNetCore.Authorization;

namespace ExploitTravelApp.Controllers.SimpleCRUDs
{
    [Authorize(Roles = "Admin")]
    public class VideosController : Controller
    {
        private readonly ApplicationDbContext _context;
        private readonly IHostingEnvironment _hostingEnvironment;

        public VideosController(ApplicationDbContext context, IHostingEnvironment hostingEnvironment)
        {
            _context = context;
            _hostingEnvironment = hostingEnvironment;
        }

        // GET: Videos
        public async Task<IActionResult> Index()
        {
            return View(await _context.Videos.ToListAsync());
        }

        // GET: Videos/Details/5
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var video = await _context.Videos
                .FirstOrDefaultAsync(m => m.Id == id);
            if (video == null)
            {
                return NotFound();
            }

            return View(video);
        }

        // GET: Videos/Create
        public IActionResult Create()
        {
            return View();
        }

        // POST: Videos/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create(VideoViewModel videoViewModel)
        {
            if (ModelState.IsValid)
            {
                string thumbnail = "No File";
                if (videoViewModel.Thumbnail != null)
                {
                    string uniqueFileName = null;
                    string stringCutted = videoViewModel.Thumbnail.FileName.Split('.').Last();
                    uniqueFileName = Guid.NewGuid().ToString() + "." + stringCutted;
                    thumbnail = uniqueFileName;
                    InputFile fileUpload = new InputFile(_hostingEnvironment);
                    fileUpload.Uploadfile("files/video_thumbnails", videoViewModel.Thumbnail, thumbnail);
                }

                var video = new Video
                {
                    Name = videoViewModel.Name,
                    Location = videoViewModel.Location,
                    Link = videoViewModel.Link,
                    ThumbnailName = thumbnail
                };

                _context.Add(video);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }
            return View(videoViewModel);
        }

        // GET: Videos/Edit/5
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var video = await _context.Videos.FirstOrDefaultAsync(m => m.Id == id);
            if (video == null)
            {
                return NotFound();
            }

            var videoViewModel = new VideoViewModel
            {
                Id = video.Id,
                Name = video.Name,
                Location = video.Location,
                Link = video.Link,
                OldThumbnailName = video.ThumbnailName
            };

            return View(videoViewModel);
        }

        // POST: Videos/Edit/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, VideoViewModel videoViewModel)
        {
            if (id != videoViewModel.Id)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                InputFile fileUpload = new InputFile(_hostingEnvironment);
                var video = new Video
                {
                    Id = videoViewModel.Id,
                    Name = videoViewModel.Name,
                    Location = videoViewModel.Location,
                    Link = videoViewModel.Link,
                    ThumbnailName = videoViewModel.OldThumbnailName
                };
                if (videoViewModel.Thumbnail != null)
                {
                    string uniqueFileName = null;
                    string stringCutted = videoViewModel.Thumbnail.FileName.Split('.').Last();
                    uniqueFileName = Guid.NewGuid().ToString() + "." + stringCutted;
                    video.ThumbnailName = uniqueFileName;
                    if (videoViewModel.OldThumbnailName.ToLower() == "no file")
                    {
                        fileUpload.Uploadfile("files/video_thumbnails", videoViewModel.Thumbnail, uniqueFileName);
                    }
                    else
                    {
                        fileUpload.Updatefile("files/video_thumbnails", videoViewModel.Thumbnail, videoViewModel.OldThumbnailName, uniqueFileName);
                    }
                }

                try
                {
                    _context.Update(video);
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!VideoExists(video.Id))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
                return RedirectToAction(nameof(Index));
            }
            return View(videoViewModel);
        }

        // GET: Videos/Delete/5
        //public async Task<IActionResult> Delete(int? id)
        //{
        //    if (id == null)
        //    {
        //        return NotFound();
        //    }

        //    var video = await _context.Videos
        //        .FirstOrDefaultAsync(m => m.Id == id);
        //    if (video == null)
        //    {
        //        return NotFound();
        //    }

        //    return View(video);
        //}

        // POST: Videos/Delete/5
        //[HttpPost, ActionName("Delete")]
        //[ValidateAntiForgeryToken]
        //public async Task<IActionResult> DeleteConfirmed(int id)
        //{
        //    var video = await _context.Videos.FindAsync(id);
        //    _context.Videos.Remove(video);
        //    await _context.SaveChangesAsync();
        //    return RedirectToAction(nameof(Index));
        //}

        private bool VideoExists(int id)
        {
            return _context.Videos.Any(e => e.Id == id);
        }
    }
}
