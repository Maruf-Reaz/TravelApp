using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using ExploitTravelApp.Data;
using ExploitTravelApp.Models.Locations;
using ExploitTravelApp.Service.Locations;
using Microsoft.AspNetCore.Authorization;

namespace ExploitTravelApp.Controllers.Locations
{
    [Authorize]
    public class LocationsController : Controller
    {
        private readonly ApplicationDbContext _context;
        private readonly LocationService _service;

        public LocationsController(ApplicationDbContext context, LocationService service)
        {
            _context = context;
            _service = service;
        }

        // GET: Locations
        [Authorize(Roles = "Admin,Agent")]
        public async Task<IActionResult> GetDivisions()
        {
            var divisions = await _context.Divisions.ToListAsync();
            return View(divisions);
        }

        // GET: Locations
        [Authorize(Roles = "Admin,Agent")]
        public async Task<IActionResult> Index()
        {
            var locations = await _service.GetAll();
            return View(locations);
        }

        // GET: Locations/Details/5
        [Authorize(Roles = "Admin,Agent")]
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var location = await _service.GetById(Convert.ToInt32(id));
            if (location == null)
            {
                return NotFound();
            }

            return View(location);
        }

        // GET: Locations/Create
        [Authorize(Roles = "Admin")]
        public IActionResult Create()
        {
            ViewData["DivisionId"] = new SelectList(_context.Divisions, "Id", "Name");
            return View();
        }

        // POST: Locations/Create
        [Authorize(Roles = "Admin")]
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("Id,DivisionId,Name,Details")] Location location)
        {
            if (ModelState.IsValid)
            {
                var result = await _service.CreateLocation(location);
                if (result == 1)
                {
                    return RedirectToAction(nameof(Index));
                }
                else
                {
                    return NotFound();
                }
            }
            ViewData["DivisionId"] = new SelectList(_context.Divisions, "Id", "Name", location.DivisionId);
            return View(location);
        }

        // GET: Locations/Edit/5
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var location = await _service.GetById(Convert.ToInt32(id));
            if (location == null)
            {
                return NotFound();
            }
            ViewData["DivisionId"] = new SelectList(_context.Divisions, "Id", "Name", location.DivisionId);
            return View(location);
        }

        // POST: Locations/Edit/5
        [Authorize(Roles = "Admin")]
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, [Bind("Id,DivisionId,Name,Details")] Location location)
        {
            if (id != location.Id)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                try
                {
                    await _service.EditLocation(location);
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!_service.LocationExists(location.Id))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
                return RedirectToAction(nameof(Index));
            }
            ViewData["DivisionId"] = new SelectList(_context.Divisions, "Id", "Name", location.DivisionId);
            return View(location);
        }

        //// GET: Locations/Delete/5
        //public async Task<IActionResult> Delete(int? id)
        //{
        //    if (id == null)
        //    {
        //        return NotFound();
        //    }

        //    var location = await _context.Locations
        //        .Include(l => l.Division)
        //        .FirstOrDefaultAsync(m => m.Id == id);
        //    if (location == null)
        //    {
        //        return NotFound();
        //    }

        //    return View(location);
        //}

        //// POST: Locations/Delete/5
        //[HttpPost, ActionName("Delete")]
        //[ValidateAntiForgeryToken]
        //public async Task<IActionResult> DeleteConfirmed(int id)
        //{
        //    var location = await _context.Locations.FindAsync(id);
        //    _context.Locations.Remove(location);
        //    await _context.SaveChangesAsync();
        //    return RedirectToAction(nameof(Index));
        //}

        //private bool LocationExists(int id)
        //{
        //    return _context.Locations.Any(e => e.Id == id);
        //}
    }
}
