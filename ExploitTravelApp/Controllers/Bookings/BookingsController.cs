using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using ExploitTravelApp.Data;
using ExploitTravelApp.Models.Bookings;
using Microsoft.AspNetCore.Authorization;

namespace ExploitTravelApp.Controllers.Bookings
{
    [Authorize]
    public class BookingsController : Controller
    {
        private readonly ApplicationDbContext _context;

        public BookingsController(ApplicationDbContext context)
        {
            _context = context;
        }

        // GET: Bookings
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> Index()
        {
            var exploitPackages = _context.Bookings.Include(b => b.ExploitPackage).ThenInclude(d => d.Agent)
                .Include(b => b.Visitor).OrderByDescending(m => m.Id);
            return View(await exploitPackages.ToListAsync());
        }

        // GET: BookingsOfAgent
        [Authorize(Roles = "Agent")]
        public async Task<IActionResult> GetBookingsOfAgent(string agentId)
        {
            var exploitPackages = _context.Bookings.Include(b => b.ExploitPackage).Include(b => b.Visitor)
                .Where(m => m.ExploitPackage.AgentId == agentId).OrderByDescending(m => m.Id);
            return View(await exploitPackages.ToListAsync());
        }

        // GET: BookingsOfVisitor
        [Authorize(Roles = "Visitor")]
        public async Task<IActionResult> GetBookingsOfVisitor(string visitorId)
        {
            var exploitPackages = _context.Bookings.Include(b => b.ExploitPackage).ThenInclude(d => d.Agent)
                .Include(b => b.Visitor).Where(m => m.VisitorId == visitorId).OrderByDescending(m => m.Id);
            return View(await exploitPackages.ToListAsync());
        }

        // GET: Bookings/Details/5
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var booking = await _context.Bookings
                .Include(b => b.ExploitPackage).ThenInclude(d => d.Bundle)
                .Include(b => b.ExploitPackage).ThenInclude(d => d.Location)
                .Include(b => b.ExploitPackage).ThenInclude(d => d.Agent)
                .Include(b => b.ExploitPackage).ThenInclude(d => d.ExploitPackageCategory)
                .Include(b => b.Visitor)
                .Include(b => b.ExploitPackage).ThenInclude(d => d.Hotels)
                .Include(b => b.ExploitPackage).ThenInclude(d => d.Sights)
                .Include(b => b.ExploitPackage).ThenInclude(d => d.Activities)
                .Include(b => b.ExploitPackage).ThenInclude(d => d.TravelItineraries)
                .FirstOrDefaultAsync(m => m.Id == id);

            if (booking == null)
            {
                return NotFound();
            }

            //var exploitPackage = _context.ExploitPackages.FirstOrDefaultAsync(m => m.Id == booking.ExploitPackageId);

            int hotelId = 0;
            int roomCategory = 0;
            if (booking.HotelId != null)
            {
                hotelId = Convert.ToInt32(booking.HotelId);
                if (booking.RoomCategory != null)
                {
                    roomCategory = Convert.ToInt32(booking.RoomCategory);
                }
            }
            ViewData["HotelId"] = hotelId;
            ViewData["RoomCategory"] = roomCategory;

            var sightIds = new List<int>();
            if (booking.SightIds != null)
            {
                string[] sightIdsFromBooking = booking.SightIds.Split('-');
                foreach (var sightIdFromBooking in sightIdsFromBooking)
                {
                    sightIds.Add(Convert.ToInt32(sightIdFromBooking));
                }
            }
            ViewData["SightIds"] = sightIds;

            var activityIds = new List<int>();
            if (booking.ActivityIds != null)
            {
                string[] activityIdsFromBooking = booking.ActivityIds.Split('-');
                foreach (var activityIdFromBooking in activityIdsFromBooking)
                {
                    activityIds.Add(Convert.ToInt32(activityIdFromBooking));
                }
            }
            ViewData["ActivityIds"] = activityIds;

            return View(booking);
        }

        // GET: Bookings/Create
        [Authorize(Roles = "Visitor")]
        public async Task<IActionResult> Create(string visitorId, int? packageId = 0)
        {
            var visitor = await _context.Visitors.FirstOrDefaultAsync(m => m.Id == visitorId);
            if (visitor == null)
            {
                return NotFound();
            }

            var package = await _context.ExploitPackages.FirstOrDefaultAsync(m => m.Id == packageId);
            if (package == null)
            {
                ViewData["ExploitPackageId"] = new SelectList(_context.ExploitPackages.Where(m => m.Status == 1), "Id", "Name");
            }
            else
            {
                ViewData["ExploitPackageId"] = new SelectList(_context.ExploitPackages.Where(m => m.Status == 1), "Id", "Name", package.Id);
            }

            ViewData["Visitor"] = visitor;
            //ViewData["ExploitPackageId"] = new SelectList(_context.ExploitPackages.Where(m => m.Status == 1), "Id", "Name");
            return View();
        }

        // POST: Bookings/Create
        [HttpPost]
        public async Task<JsonResult> Create([Bind("Id,ExploitPackageId,VisitorId,ContactNumber,FromDate,ToDate,NumberOfPeople,HotelId,RoomCategory,SightIds,ActivityIds")] Booking booking)
        {
            bool result = false;
            if (ModelState.IsValid)
            {
                booking.Status = 0;
                _context.Add(booking);
                int count = await _context.SaveChangesAsync();
                if (count == 1)
                {
                    result = true;
                }
                //return RedirectToAction(nameof(Index));
            }
            //ViewData["ExploitPackageId"] = new SelectList(_context.ExploitPackages, "Id", "Name", booking.ExploitPackageId);
            //ViewData["VisitorId"] = new SelectList(_context.Visitors, "Id", "Name", booking.VisitorId);
            return Json(result);
        }

        // GET: Bookings/Confirm/5
        [HttpPost]
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> Confirm(Booking booking)
        {
            var bookingForConfirmation = await _context.Bookings.FirstOrDefaultAsync(m => m.Id == booking.Id);

            bookingForConfirmation.Status = 1;
            bookingForConfirmation.EstimatedAmount = booking.EstimatedAmount;
            _context.Update(bookingForConfirmation);
            await _context.SaveChangesAsync();

            return RedirectToAction(nameof(Details), new { id = bookingForConfirmation.Id });
        }

        // GET: Bookings/Cancel/5
        [HttpPost]
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> Cancel(Booking booking)
        {
            var bookingForCancel = await _context.Bookings.FirstOrDefaultAsync(m => m.Id == booking.Id);

            if (bookingForCancel == null)
            {
                return NotFound();
            }

            bookingForCancel.Status = 404;
            _context.Update(bookingForCancel);
            await _context.SaveChangesAsync();

            return RedirectToAction(nameof(Details), new { id = bookingForCancel.Id });
        }

        // GET: Bookings/MakePayment/5
        [HttpGet]
        [Authorize(Roles = "Visitor")]
        public async Task<IActionResult> MakePayment(int? bookingId)
        {
            if (bookingId == null)
            {
                return NotFound();
            }

            var booking = await _context.Bookings.FirstOrDefaultAsync(m => m.Id == bookingId);

            if (booking == null)
            {
                return NotFound();
            }

            if (booking.Status != 1)
            {
                return NotFound();
            }

            ViewData["BookingId"] = booking.Id;

            return View();
        }

        // POST: Bookings/MakePayment/5
        [HttpPost]
        [Authorize(Roles = "Visitor")]
        public async Task<IActionResult> MakePayment(Payment payment)
        {
            if (ModelState.IsValid)
            {
                payment.Status = 0;
                _context.Add(payment);
                int count = await _context.SaveChangesAsync();
                if (count == 1)
                {
                    return RedirectToAction(nameof(GetPaymentHistory), new { bookingId = payment.BookingId });
                }
            }

            return View(payment);
        }

        // GET: Bookings/GetPaymentHistory/5
        [HttpGet]
        [Authorize(Roles = "Visitor,Admin")]
        public async Task<IActionResult> GetPaymentHistory(int? bookingId)
        {
            if (bookingId == null)
            {
                return NotFound();
            }

            var booking = await _context.Bookings
                .Include(m => m.Visitor).Include(m => m.Payments)
                .Include(m => m.ExploitPackage).ThenInclude(d => d.Bundle)
                .Include(m => m.ExploitPackage).ThenInclude(d => d.Agent)
                .FirstOrDefaultAsync(m => m.Id == bookingId);

            if (booking == null)
            {
                return NotFound();
            }

            if (booking.Status != 1)
            {
                return NotFound();
            }

            return View(booking);
        }

        // GET: Bookings/GetPaymentHistory/5
        [HttpGet]
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> Verify(int? paymentId)
        {
            if (paymentId == null)
            {
                return NotFound();
            }

            var payment = await _context.Payments
                .FirstOrDefaultAsync(m => m.Id == paymentId);

            if (payment == null)
            {
                return NotFound();
            }

            payment.Status = 1;
            _context.Update(payment);
            await _context.SaveChangesAsync();
            return RedirectToAction(nameof(GetPaymentHistory), new { bookingId = payment.BookingId });
        }

        // GET: Bookings/Edit/5
        //public async Task<IActionResult> Edit(int? id)
        //{
        //    if (id == null)
        //    {
        //        return NotFound();
        //    }

        //    var booking = await _context.Bookings.FindAsync(id);
        //    if (booking == null)
        //    {
        //        return NotFound();
        //    }
        //    ViewData["ExploitPackageId"] = new SelectList(_context.ExploitPackages, "Id", "Name", booking.ExploitPackageId);
        //    ViewData["VisitorId"] = new SelectList(_context.Visitors, "Id", "Name", booking.VisitorId);
        //    return View(booking);
        //}

        // POST: Bookings/Edit/5
        //[HttpPost]
        //[ValidateAntiForgeryToken]
        //public async Task<IActionResult> Edit(int id, [Bind("Id,ExploitPackageId,VisitorId,FromDate,ToDate,NumberOfPeople")] Booking booking)
        //{
        //    if (id != booking.Id)
        //    {
        //        return NotFound();
        //    }

        //    if (ModelState.IsValid)
        //    {
        //        try
        //        {
        //            _context.Update(booking);
        //            await _context.SaveChangesAsync();
        //        }
        //        catch (DbUpdateConcurrencyException)
        //        {
        //            if (!BookingExists(booking.Id))
        //            {
        //                return NotFound();
        //            }
        //            else
        //            {
        //                throw;
        //            }
        //        }
        //        return RedirectToAction(nameof(Index));
        //    }
        //    ViewData["ExploitPackageId"] = new SelectList(_context.ExploitPackages, "Id", "Name", booking.ExploitPackageId);
        //    ViewData["VisitorId"] = new SelectList(_context.Visitors, "Id", "Name", booking.VisitorId);
        //    return View(booking);
        //}

        // GET: Bookings/Delete/5
        //public async Task<IActionResult> Delete(int? id)
        //{
        //    if (id == null)
        //    {
        //        return NotFound();
        //    }

        //    var booking = await _context.Bookings
        //        .Include(b => b.ExploitPackage)
        //        .Include(b => b.Visitor)
        //        .FirstOrDefaultAsync(m => m.Id == id);
        //    if (booking == null)
        //    {
        //        return NotFound();
        //    }

        //    return View(booking);
        //}

        // POST: Bookings/Delete/5
        //[HttpPost, ActionName("Delete")]
        //[ValidateAntiForgeryToken]
        //public async Task<IActionResult> DeleteConfirmed(int id)
        //{
        //    var booking = await _context.Bookings.FindAsync(id);
        //    _context.Bookings.Remove(booking);
        //    await _context.SaveChangesAsync();
        //    return RedirectToAction(nameof(Index));
        //}

        private bool BookingExists(int id)
        {
            return _context.Bookings.Any(e => e.Id == id);
        }
    }
}
