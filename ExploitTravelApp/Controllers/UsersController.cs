using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using ExploitTravelApp.Data;
using ExploitTravelApp.Models.Bookings;
using ExploitTravelApp.Models.Bookings.ViewModels;
using ExploitTravelApp.Models.Common.Authentication;
using ExploitTravelApp.Models.Common.File;
using ExploitTravelApp.Models.Common.ViewModels;
using ExploitTravelApp.Models.ExploitPackages;
using ExploitTravelApp.Models.ExploitPackages.ViewModels;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace ExploitTravelApp.Controllers
{
    [Authorize]
    public class UsersController : Controller
    {
        private readonly UserManager<ApplicationUser> _userManager;
        private readonly RoleManager<ApplicationRole> _roleManager;
        private readonly ApplicationDbContext _context;
        private readonly IHostingEnvironment _hostingEnvironment;

        public UsersController(UserManager<ApplicationUser> userManager, RoleManager<ApplicationRole> roleManager, ApplicationDbContext context, IHostingEnvironment hostingEnvironment)
        {
            _userManager = userManager;
            _roleManager = roleManager;
            _context = context;
            _hostingEnvironment = hostingEnvironment;
        }

        //To Get Visitors
        [Authorize(Roles = "Admin")]
        [HttpGet]
        public IActionResult Index()
        {
            var users = _userManager.Users.Include(m => m.UserCategory).Where(m => m.UserCategoryId == 1);
            return View(users);
        }

        //To Get Pending Agents
        [Authorize(Roles = "Admin")]
        [HttpGet]
        public IActionResult GetPendingAgents()
        {
            var users = _userManager.Users.Include(m => m.UserCategory).Where(m => m.UserCategoryId == 2 && m.AgentStatus == 0);
            return View(users);
        }

        [Authorize(Roles = "Admin")]
        [HttpGet]
        public async Task<IActionResult> Approve(string id)
        {
            if (id == null)
            {
                return NotFound();
            }
            var user = await _userManager.FindByIdAsync(id);
            if (user == null)
            {
                return NotFound();
            }
            if (user.UserCategoryId == 2)
            {
                user.AgentStatus = 1;
            }
            var result = await _userManager.UpdateAsync(user);

            //Redirect User
            if (result.Succeeded)
            {
                //var agent = new Agent
                //{
                //    Id = user.Id,
                //    Name = user.UserName,
                //    LogoFileName = "No File"
                //};
                //_context.Add(agent);
                //await _context.SaveChangesAsync();

                return RedirectToAction("GetApprovedAgents", "Users");
            }

            var users = _userManager.Users.Include(m => m.UserCategory).Where(m => m.UserCategoryId == 2 && m.AgentStatus == 0);
            return View(users);
        }

        //To Get Approved Agents
        [Authorize(Roles = "Admin")]
        [HttpGet]
        public IActionResult GetApprovedAgents()
        {
            var users = _userManager.Users.Include(m => m.UserCategory).Where(m => m.UserCategoryId == 2 && m.AgentStatus == 1);
            return View(users);
        }

        [Authorize(Roles = "Admin")]
        [HttpGet]
        public IActionResult GetAdmins()
        {
            var users = _userManager.Users.Include(m => m.UserCategory).Where(m => m.UserCategoryId == 3);
            return View(users);
        }

        [Authorize(Roles = "Admin")]
        [HttpGet]
        public async Task<IActionResult> Edit(string id)
        {
            if (id == null)
            {
                return NotFound();
            }
            var user = await _userManager.FindByIdAsync(id);
            if (user == null)
            {
                return NotFound();
            }

            var userRoles = await _userManager.GetRolesAsync(user);
            var editUserViewModel = new EditUserViewModel
            {
                Id = user.Id,
                UserName = user.UserName,
                Email = user.Email,
                Roles = userRoles
            };

            return View(editUserViewModel);
        }

        [Authorize(Roles = "Admin")]
        [HttpPost]
        public async Task<IActionResult> Edit(string id, EditUserViewModel editUserViewModel)
        {
            if (id != editUserViewModel.Id)
            {
                return NotFound();
            }
            var user = await _userManager.FindByIdAsync(id);
            if (user == null)
            {
                return NotFound();
            }
            else
            {
                user.UserName = editUserViewModel.UserName;
                user.Email = editUserViewModel.Email;

                var result = await _userManager.UpdateAsync(user);

                //Redirect User
                if (result.Succeeded)
                {
                    return RedirectToAction("Index", "Users");
                }
                foreach (IdentityError error in result.Errors)
                {
                    ModelState.AddModelError("", error.Description);
                }

                return View(editUserViewModel);
            }
        }

        //GET
        [Authorize(Roles = "Admin")]
        [HttpGet]
        public async Task<IActionResult> EditRolesOfUser(string userId)
        {
            if (userId == null)
            {
                return NotFound();
            }
            var user = await _userManager.FindByIdAsync(userId);
            if (user == null)
            {
                return NotFound();
            }

            ViewBag.userId = userId;
            ViewBag.userName = user.UserName;

            var userRoleViewModels = new List<UserRoleViewModel>();

            foreach (var role in _roleManager.Roles)
            {
                var userRoleViewModel = new UserRoleViewModel
                {
                    RoleId = role.Id,
                    RoleName = role.Name
                };
                if (await _userManager.IsInRoleAsync(user, role.Name))
                {
                    userRoleViewModel.IsSelected = true;
                }
                else
                {
                    userRoleViewModel.IsSelected = false;
                }
                userRoleViewModels.Add(userRoleViewModel);
            }

            return View(userRoleViewModels);
        }

        //POST
        [Authorize(Roles = "Admin")]
        [HttpPost]
        public async Task<IActionResult> EditRolesOfUser(string userId, List<UserRoleViewModel> userRoleViewModels)
        {
            if (userId == null)
            {
                return NotFound();
            }
            var user = await _userManager.FindByIdAsync(userId);
            if (user == null)
            {
                return NotFound();
            }

            for (int i = 0; i < userRoleViewModels.Count; i++)
            {
                var role = await _roleManager.FindByIdAsync(userRoleViewModels[i].RoleId);
                IdentityResult result = null;
                if (userRoleViewModels[i].IsSelected && !(await _userManager.IsInRoleAsync(user, role.Name)))
                {
                    result = await _userManager.AddToRoleAsync(user, role.Name);
                }
                else if (!userRoleViewModels[i].IsSelected && (await _userManager.IsInRoleAsync(user, role.Name)))
                {
                    result = await _userManager.RemoveFromRoleAsync(user, role.Name);
                }
                else
                {
                    continue;
                }

                if (result.Succeeded)
                {
                    if (i < userRoleViewModels.Count - 1)
                    {
                        continue;
                    }
                    else
                    {
                        return RedirectToAction("Edit", new { Id = userId });
                    }
                }
            }

            return RedirectToAction("Edit", new { Id = userId });
        }

        //GET
        [Authorize(Roles = "Agent")]
        [HttpGet]
        public async Task<IActionResult> UpdateProfileOfAgent(string userId)
        {
            if (userId == null)
            {
                return NotFound();
            }
            var agent = await _context.Agents.FirstOrDefaultAsync(m => m.Id == userId);
            if (agent == null)
            {
                return NotFound();
            }

            var agentViewModel = new AgentViewModel
            {
                Id = agent.Id,
                Name = agent.Name,
                OldLogoFileName = agent.LogoFileName,
                PhoneNumber = agent.PhoneNumber
            };

            return View(agentViewModel);
        }

        //POST
        [Authorize(Roles = "Agent")]
        [HttpPost]
        public async Task<IActionResult> UpdateProfileOfAgent(string id, AgentViewModel agentViewModel)
        {
            if (id != agentViewModel.Id)
            {
                return NotFound();
            }
            var agentForUpdate = await _context.Agents.FirstOrDefaultAsync(m => m.Id == id);
            if (agentForUpdate == null)
            {
                return NotFound();
            }

            agentForUpdate.Name = agentViewModel.Name;
            agentForUpdate.PhoneNumber = agentViewModel.PhoneNumber;
            agentForUpdate.LogoFileName = agentViewModel.OldLogoFileName;

            InputFile fileUpload = new InputFile(_hostingEnvironment);
            if (agentViewModel.LogoFile != null)
            {
                string uniqueFileName = null;
                string stringCutted = agentViewModel.LogoFile.FileName.Split('.').Last();
                uniqueFileName = Guid.NewGuid().ToString() + "." + stringCutted;
                agentForUpdate.LogoFileName = uniqueFileName;
                if (agentViewModel.OldLogoFileName.ToLower() == "no file")
                {
                    fileUpload.Uploadfile("files/agent_logos", agentViewModel.LogoFile, uniqueFileName);
                }
                else
                {
                    fileUpload.Updatefile("files/agent_logos", agentViewModel.LogoFile, agentViewModel.OldLogoFileName, uniqueFileName);
                }
            }

            _context.Update(agentForUpdate);
            await _context.SaveChangesAsync();

            return RedirectToAction("Backpanel", "Home");
        }

        //GET
        [Authorize(Roles = "Visitor")]
        [HttpGet]
        public async Task<IActionResult> UpdateProfileOfVisitor(string userId)
        {
            if (userId == null)
            {
                return NotFound();
            }
            var visitor = await _context.Visitors.FirstOrDefaultAsync(m => m.Id == userId);
            if (visitor == null)
            {
                return NotFound();
            }

            var visitorViewModel = new VisitorViewModel
            {
                Id = visitor.Id,
                Name = visitor.Name,
                OldPhotoName = visitor.PhotoName,
                PhoneNumber = visitor.PhoneNumber,
                NidOrPassportNumber = visitor.NidOrPassportNumber
            };

            return View(visitorViewModel);
        }

        //POST
        [Authorize(Roles = "Visitor")]
        [HttpPost]
        public async Task<IActionResult> UpdateProfileOfVisitor(string id, VisitorViewModel visitorViewModel)
        {
            if (id != visitorViewModel.Id)
            {
                return NotFound();
            }
            var visitorForUpdate = await _context.Visitors.FirstOrDefaultAsync(m => m.Id == id);
            if (visitorForUpdate == null)
            {
                return NotFound();
            }

            visitorForUpdate.Name = visitorViewModel.Name;
            visitorForUpdate.PhoneNumber = visitorViewModel.PhoneNumber;
            visitorForUpdate.NidOrPassportNumber = visitorViewModel.NidOrPassportNumber;
            visitorForUpdate.PhotoName = visitorViewModel.OldPhotoName;

            InputFile fileUpload = new InputFile(_hostingEnvironment);
            if (visitorViewModel.Photo != null)
            {
                string uniqueFileName = null;
                string stringCutted = visitorViewModel.Photo.FileName.Split('.').Last();
                uniqueFileName = Guid.NewGuid().ToString() + "." + stringCutted;
                visitorForUpdate.PhotoName = uniqueFileName;
                if (visitorViewModel.OldPhotoName.ToLower() == "no file")
                {
                    fileUpload.Uploadfile("files/visitor_photos", visitorViewModel.Photo, uniqueFileName);
                }
                else
                {
                    fileUpload.Updatefile("files/visitor_photos", visitorViewModel.Photo, visitorViewModel.OldPhotoName, uniqueFileName);
                }
            }

            _context.Update(visitorForUpdate);
            await _context.SaveChangesAsync();

            return RedirectToAction("Backpanel", "Home");
        }

    }
}