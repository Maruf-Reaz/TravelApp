using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using ExploitTravelApp.Data;
using ExploitTravelApp.Models.ExploitPackages;
using Microsoft.AspNetCore.Identity;
using ExploitTravelApp.Models.Common.Authentication;
using Microsoft.AspNetCore.Authorization;
using ExploitTravelApp.Models.ExploitPackages.ViewModels;
using Microsoft.AspNetCore.Hosting;
using ExploitTravelApp.Models.Common.File;

namespace ExploitTravelApp.Controllers.ExploitPackages
{
    [Authorize]
    public class ExploitPackagesController : Controller
    {
        private readonly ApplicationDbContext _context;
        private readonly UserManager<ApplicationUser> _userManager;
        private readonly IHostingEnvironment _hostingEnvironment;

        public ExploitPackagesController(ApplicationDbContext context, UserManager<ApplicationUser> userManager, IHostingEnvironment hostingEnvironment)
        {
            _context = context;
            _userManager = userManager;
            _hostingEnvironment = hostingEnvironment;
        }

        // GET: ExploitPackages
        [Authorize(Roles = "Agent")]
        public async Task<IActionResult> Index(string agentId)
        {
            var exploitPackages = _context.ExploitPackages
                .Include(e => e.Agent).Include(e => e.ExploitPackageCategory)
                .Include(e => e.Location).Include(m => m.Bundle).Where(m => m.AgentId == agentId);
            return View(await exploitPackages.ToListAsync());
        }

        // GET: GetPendingPackages
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> GetPendingPackages()
        {
            var exploitPackages = _context.ExploitPackages
                .Include(e => e.Agent).Include(e => e.ExploitPackageCategory)
                .Include(e => e.Location).Include(m => m.Bundle).Where(m => m.Status == 0);
            return View(await exploitPackages.ToListAsync());
        }

        // GET: ExploitPackages/Approve/5
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> Approve(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var exploitPackage = await _context.ExploitPackages
                .FirstOrDefaultAsync(m => m.Id == id);

            if (exploitPackage == null)
            {
                return NotFound();
            }

            exploitPackage.Status = 1;
            _context.Update(exploitPackage);
            int count = await _context.SaveChangesAsync();

            if (count == 1)
            {
                return RedirectToAction(nameof(GetApprovedPackages));
            }
            else
            {
                return RedirectToAction(nameof(GetPendingPackages));
            }
        }

        // GET: GetApprovedPackages
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> GetApprovedPackages()
        {
            var exploitPackages = _context.ExploitPackages
                .Include(e => e.Agent).Include(e => e.ExploitPackageCategory)
                .Include(e => e.Location).Include(m => m.Bundle).Where(m => m.Status == 1);
            return View(await exploitPackages.ToListAsync());
        }

        // GET: ExploitPackages/Details/5
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var exploitPackage = await _context.ExploitPackages
                .Include(e => e.Agent)
                .Include(e => e.ExploitPackageCategory)
                .Include(e => e.Location)
                .Include(m => m.Bundle)
                .Include(m => m.Hotels)
                .Include(m => m.Sights)
                .Include(m => m.Activities)
                .Include(m => m.TravelItineraries)
                .FirstOrDefaultAsync(m => m.Id == id);

            if (exploitPackage == null)
            {
                return NotFound();
            }

            return View(exploitPackage);
        }

        // GET: ExploitPackages/Create
        [HttpGet]
        [Authorize(Roles = "Admin,Agent")]
        public async Task<IActionResult> Create(string agentId, int? exploitPackageId)
        {
            //ViewData["AgentId"] = new SelectList(_context.Agents, "Id", "Name");
            if (agentId == null)
            {
                return NotFound();
            }

            var user = await _userManager.FindByIdAsync(agentId);
            if (user == null)
            {
                return NotFound();
            }

            var exploitPackage = await _context.ExploitPackages.Include(m => m.Hotels)
                .Include(m => m.Sights).Include(m => m.Activities).Include(m => m.TravelItineraries)
                .FirstOrDefaultAsync(m => m.Id == exploitPackageId);

            ViewData["Agent"] = user;
            //ViewData["ExploitPackage"] = exploitPackage;

            if (exploitPackage == null)
            {
                ViewData["BundleId"] = new SelectList(_context.Bundles, "Id", "Name");
                ViewData["ExploitPackageCategoryId"] = new SelectList(_context.ExploitPackageCategories, "Id", "Name");
                ViewData["LocationId"] = new SelectList(_context.Locations, "Id", "Name");
                ViewData["ExploitPackage"] = exploitPackage;
                return View();
            }
            else
            {
                var exploitPackageViewModel = new ExploitPackageViewModel();
                exploitPackageViewModel.Id = exploitPackage.Id;
                exploitPackageViewModel.BundleId = exploitPackage.BundleId;
                exploitPackageViewModel.Bundle = exploitPackage.Bundle;
                exploitPackageViewModel.ExploitPackageCategoryId = exploitPackage.ExploitPackageCategoryId;
                exploitPackageViewModel.ExploitPackageCategory = exploitPackage.ExploitPackageCategory;
                exploitPackageViewModel.LocationId = exploitPackage.LocationId;
                exploitPackageViewModel.Location = exploitPackage.Location;
                exploitPackageViewModel.AgentId = exploitPackage.AgentId;
                exploitPackageViewModel.Agent = exploitPackage.Agent;
                exploitPackageViewModel.Name = exploitPackage.Name;
                exploitPackageViewModel.PlaceName = exploitPackage.PlaceName;
                exploitPackageViewModel.DefaultPrice = exploitPackage.DefaultPrice;
                exploitPackageViewModel.Nights = exploitPackage.Nights;
                exploitPackageViewModel.Days = exploitPackage.Days;
                exploitPackageViewModel.Note = exploitPackage.Note;
                exploitPackageViewModel.Status = exploitPackage.Status;
                exploitPackageViewModel.OldPhotoName1 = exploitPackage.PhotoName1;
                exploitPackageViewModel.OldPhotoName2 = exploitPackage.PhotoName2;
                exploitPackageViewModel.OldPhotoName3 = exploitPackage.PhotoName3;
                exploitPackageViewModel.OldPhotoName4 = exploitPackage.PhotoName4;
                exploitPackageViewModel.OldPhotoName5 = exploitPackage.PhotoName5;
                exploitPackageViewModel.Hotels = exploitPackage.Hotels;
                exploitPackageViewModel.Sights = exploitPackage.Sights;
                exploitPackageViewModel.Activities = exploitPackage.Activities;
                exploitPackageViewModel.TravelItineraries = exploitPackage.TravelItineraries;

                ViewData["BundleId"] = new SelectList(_context.Bundles, "Id", "Name", exploitPackageViewModel.BundleId);
                ViewData["ExploitPackageCategoryId"] = new SelectList(_context.ExploitPackageCategories, "Id", "Name", exploitPackageViewModel.ExploitPackageCategoryId);
                ViewData["LocationId"] = new SelectList(_context.Locations, "Id", "Name", exploitPackageViewModel.LocationId);
                ViewData["ExploitPackage"] = exploitPackageViewModel;

                return View(exploitPackageViewModel);
            }
        }

        // POST: ExploitPackages/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        [Authorize(Roles = "Admin,Agent")]
        public async Task<IActionResult> Create(ExploitPackageViewModel exploitPackageViewModel)
        {
            if (ModelState.IsValid)
            {
                var exploitPackage = new ExploitPackage();
                exploitPackage.Id = exploitPackageViewModel.Id;
                exploitPackage.BundleId = exploitPackageViewModel.BundleId;
                exploitPackage.ExploitPackageCategoryId = exploitPackageViewModel.ExploitPackageCategoryId;
                exploitPackage.LocationId = exploitPackageViewModel.LocationId;
                exploitPackage.AgentId = exploitPackageViewModel.AgentId;
                exploitPackage.Name = exploitPackageViewModel.Name;
                exploitPackage.PlaceName = exploitPackageViewModel.PlaceName;
                exploitPackage.DefaultPrice = exploitPackageViewModel.DefaultPrice;
                exploitPackage.Nights = exploitPackageViewModel.Nights;
                exploitPackage.Days = exploitPackageViewModel.Days;
                exploitPackage.Note = exploitPackageViewModel.Note;

                if (exploitPackage.Id == 0)
                {
                    exploitPackage.Status = 0;

                    string photo1 = "No File";
                    if (exploitPackageViewModel.Photo1 != null)
                    {
                        string uniqueFileName = null;
                        string stringCutted = exploitPackageViewModel.Photo1.FileName.Split('.').Last();
                        uniqueFileName = Guid.NewGuid().ToString() + "." + stringCutted;
                        photo1 = uniqueFileName;
                        InputFile fileUpload = new InputFile(_hostingEnvironment);
                        fileUpload.Uploadfile("files/exploit_packages", exploitPackageViewModel.Photo1, photo1);
                    }
                    exploitPackage.PhotoName1 = photo1;

                    string photo2 = "No File";
                    if (exploitPackageViewModel.Photo2 != null)
                    {
                        string uniqueFileName = null;
                        string stringCutted = exploitPackageViewModel.Photo2.FileName.Split('.').Last();
                        uniqueFileName = Guid.NewGuid().ToString() + "." + stringCutted;
                        photo2 = uniqueFileName;
                        InputFile fileUpload = new InputFile(_hostingEnvironment);
                        fileUpload.Uploadfile("files/exploit_packages", exploitPackageViewModel.Photo2, photo2);
                    }
                    exploitPackage.PhotoName2 = photo2;

                    string photo3 = "No File";
                    if (exploitPackageViewModel.Photo3 != null)
                    {
                        string uniqueFileName = null;
                        string stringCutted = exploitPackageViewModel.Photo3.FileName.Split('.').Last();
                        uniqueFileName = Guid.NewGuid().ToString() + "." + stringCutted;
                        photo3 = uniqueFileName;
                        InputFile fileUpload = new InputFile(_hostingEnvironment);
                        fileUpload.Uploadfile("files/exploit_packages", exploitPackageViewModel.Photo3, photo3);
                    }
                    exploitPackage.PhotoName3 = photo3;

                    string photo4 = "No File";
                    if (exploitPackageViewModel.Photo4 != null)
                    {
                        string uniqueFileName = null;
                        string stringCutted = exploitPackageViewModel.Photo4.FileName.Split('.').Last();
                        uniqueFileName = Guid.NewGuid().ToString() + "." + stringCutted;
                        photo4 = uniqueFileName;
                        InputFile fileUpload = new InputFile(_hostingEnvironment);
                        fileUpload.Uploadfile("files/exploit_packages", exploitPackageViewModel.Photo4, photo4);
                    }
                    exploitPackage.PhotoName4 = photo4;

                    string photo5 = "No File";
                    if (exploitPackageViewModel.Photo5 != null)
                    {
                        string uniqueFileName = null;
                        string stringCutted = exploitPackageViewModel.Photo5.FileName.Split('.').Last();
                        uniqueFileName = Guid.NewGuid().ToString() + "." + stringCutted;
                        photo5 = uniqueFileName;
                        InputFile fileUpload = new InputFile(_hostingEnvironment);
                        fileUpload.Uploadfile("files/exploit_packages", exploitPackageViewModel.Photo5, photo5);
                    }
                    exploitPackage.PhotoName5 = photo5;

                    _context.Add(exploitPackage);
                    await _context.SaveChangesAsync();
                    return RedirectToAction(nameof(Index), new { agentId = exploitPackage.AgentId });
                }
                else
                {
                    exploitPackage.Status = exploitPackageViewModel.Status;

                    InputFile fileUpload = new InputFile(_hostingEnvironment);
                    exploitPackage.PhotoName1 = exploitPackageViewModel.OldPhotoName1;
                    if (exploitPackageViewModel.Photo1 != null)
                    {
                        string uniqueFileName = null;
                        string stringCutted = exploitPackageViewModel.Photo1.FileName.Split('.').Last();
                        uniqueFileName = Guid.NewGuid().ToString() + "." + stringCutted;
                        exploitPackage.PhotoName1 = uniqueFileName;
                        if (exploitPackageViewModel.OldPhotoName1.ToLower() == "no file")
                        {
                            fileUpload.Uploadfile("files/exploit_packages", exploitPackageViewModel.Photo1, uniqueFileName);
                        }
                        else
                        {
                            fileUpload.Updatefile("files/exploit_packages", exploitPackageViewModel.Photo1, exploitPackageViewModel.OldPhotoName1, uniqueFileName);
                        }
                    }

                    exploitPackage.PhotoName2 = exploitPackageViewModel.OldPhotoName2;
                    if (exploitPackageViewModel.Photo2 != null)
                    {
                        string uniqueFileName = null;
                        string stringCutted = exploitPackageViewModel.Photo2.FileName.Split('.').Last();
                        uniqueFileName = Guid.NewGuid().ToString() + "." + stringCutted;
                        exploitPackage.PhotoName2 = uniqueFileName;
                        if (exploitPackageViewModel.OldPhotoName2.ToLower() == "no file")
                        {
                            fileUpload.Uploadfile("files/exploit_packages", exploitPackageViewModel.Photo2, uniqueFileName);
                        }
                        else
                        {
                            fileUpload.Updatefile("files/exploit_packages", exploitPackageViewModel.Photo2, exploitPackageViewModel.OldPhotoName2, uniqueFileName);
                        }
                    }

                    exploitPackage.PhotoName3 = exploitPackageViewModel.OldPhotoName3;
                    if (exploitPackageViewModel.Photo3 != null)
                    {
                        string uniqueFileName = null;
                        string stringCutted = exploitPackageViewModel.Photo3.FileName.Split('.').Last();
                        uniqueFileName = Guid.NewGuid().ToString() + "." + stringCutted;
                        exploitPackage.PhotoName3 = uniqueFileName;
                        if (exploitPackageViewModel.OldPhotoName3.ToLower() == "no file")
                        {
                            fileUpload.Uploadfile("files/exploit_packages", exploitPackageViewModel.Photo3, uniqueFileName);
                        }
                        else
                        {
                            fileUpload.Updatefile("files/exploit_packages", exploitPackageViewModel.Photo3, exploitPackageViewModel.OldPhotoName3, uniqueFileName);
                        }
                    }

                    exploitPackage.PhotoName4 = exploitPackageViewModel.OldPhotoName4;
                    if (exploitPackageViewModel.Photo4 != null)
                    {
                        string uniqueFileName = null;
                        string stringCutted = exploitPackageViewModel.Photo4.FileName.Split('.').Last();
                        uniqueFileName = Guid.NewGuid().ToString() + "." + stringCutted;
                        exploitPackage.PhotoName4 = uniqueFileName;
                        if (exploitPackageViewModel.OldPhotoName4.ToLower() == "no file")
                        {
                            fileUpload.Uploadfile("files/exploit_packages", exploitPackageViewModel.Photo4, uniqueFileName);
                        }
                        else
                        {
                            fileUpload.Updatefile("files/exploit_packages", exploitPackageViewModel.Photo4, exploitPackageViewModel.OldPhotoName4, uniqueFileName);
                        }
                    }

                    exploitPackage.PhotoName5 = exploitPackageViewModel.OldPhotoName5;
                    if (exploitPackageViewModel.Photo5 != null)
                    {
                        string uniqueFileName = null;
                        string stringCutted = exploitPackageViewModel.Photo5.FileName.Split('.').Last();
                        uniqueFileName = Guid.NewGuid().ToString() + "." + stringCutted;
                        exploitPackage.PhotoName5 = uniqueFileName;
                        if (exploitPackageViewModel.OldPhotoName5.ToLower() == "no file")
                        {
                            fileUpload.Uploadfile("files/exploit_packages", exploitPackageViewModel.Photo5, uniqueFileName);
                        }
                        else
                        {
                            fileUpload.Updatefile("files/exploit_packages", exploitPackageViewModel.Photo5, exploitPackageViewModel.OldPhotoName5, uniqueFileName);
                        }
                    }

                    _context.Update(exploitPackage);
                    await _context.SaveChangesAsync();
                    return RedirectToAction("Backpanel", "Home");
                }
            }

            var user = await _userManager.FindByIdAsync(exploitPackageViewModel.AgentId);
            ViewData["Agent"] = user;

            var exploitPackage1 = await _context.ExploitPackages.Include(m => m.Hotels)
                .Include(m => m.Sights).Include(m => m.Activities).Include(m => m.TravelItineraries)
                .FirstOrDefaultAsync(m => m.Id == exploitPackageViewModel.Id);
            ViewData["ExploitPackage"] = exploitPackage1;

            //ViewData["AgentId"] = new SelectList(_context.Agents, "Id", "Name", exploitPackage.AgentId);
            ViewData["BundleId"] = new SelectList(_context.Bundles, "Id", "Name", exploitPackageViewModel.BundleId);
            ViewData["ExploitPackageCategoryId"] = new SelectList(_context.ExploitPackageCategories, "Id", "Name", exploitPackageViewModel.ExploitPackageCategoryId);
            ViewData["LocationId"] = new SelectList(_context.Locations, "Id", "Name", exploitPackageViewModel.LocationId);
            return View(exploitPackageViewModel);
        }

        [HttpPost]
        public async Task<JsonResult> AddHotel(Hotel hotel)
        {
            bool result = false;
            if (ModelState.IsValid)
            {
                int count = 0;
                if (hotel.Id == 0)
                {
                    _context.Add(hotel);
                    count = await _context.SaveChangesAsync();
                    if (count == 1)
                    {
                        result = true;
                    }
                }
                else
                {
                    _context.Update(hotel);
                    count = await _context.SaveChangesAsync();
                    if (count == 1)
                    {
                        result = true;
                    }
                }
            }

            return Json(result);
        }

        [HttpPost]
        public async Task<JsonResult> AddSight(Sight sight)
        {
            bool result = false;
            if (ModelState.IsValid)
            {
                int count = 0;
                if (sight.Id == 0)
                {
                    _context.Add(sight);
                    count = await _context.SaveChangesAsync();
                    if (count == 1)
                    {
                        result = true;
                    }
                }
                else
                {
                    _context.Update(sight);
                    count = await _context.SaveChangesAsync();
                    if (count == 1)
                    {
                        result = true;
                    }
                }
            }

            return Json(result);
        }

        [HttpPost]
        public async Task<JsonResult> AddActivity(Activity activity)
        {
            bool result = false;
            if (ModelState.IsValid)
            {
                int count = 0;
                if (activity.Id == 0)
                {
                    _context.Add(activity);
                    count = await _context.SaveChangesAsync();
                    if (count == 1)
                    {
                        result = true;
                    }
                }
                else
                {
                    _context.Update(activity);
                    count = await _context.SaveChangesAsync();
                    if (count == 1)
                    {
                        result = true;
                    }
                }
            }

            return Json(result);
        }

        [HttpPost]
        public async Task<JsonResult> AddTravelItinerary(TravelItinerary travelItinerary)
        {
            bool result = false;
            if (ModelState.IsValid)
            {
                int count = 0;
                if (travelItinerary.Id == 0)
                {
                    _context.Add(travelItinerary);
                    count = await _context.SaveChangesAsync();
                    if (count == 1)
                    {
                        result = true;
                    }
                }
                else
                {
                    _context.Update(travelItinerary);
                    count = await _context.SaveChangesAsync();
                    if (count == 1)
                    {
                        result = true;
                    }
                }
            }

            return Json(result);
        }

        // POST: ExploitPackages/GetPackageDetails/5
        [HttpPost]
        public async Task<JsonResult> GetPackage(int id)
        {
            var exploitPackage = await _context.ExploitPackages
                .Include(e => e.Agent)
                .Include(e => e.ExploitPackageCategory)
                .Include(e => e.Location).ThenInclude(d => d.Division)
                .Include(m => m.Bundle)
                .FirstOrDefaultAsync(m => m.Id == id);

            var exploitPackageForBookingViewModel = new ExploitPackageForBookingViewModel
            {
                Id = exploitPackage.Id,
                Name = exploitPackage.Name,
                LocationName = exploitPackage.Location.Name,
                DivisionName = exploitPackage.Location.Division.Name,
                Nights = exploitPackage.Nights.ToString(),
                Days = exploitPackage.Days.ToString(),
                AgentName = exploitPackage.Agent.Name,
                DefaultPrice = exploitPackage.DefaultPrice.ToString(),
                PackageCategoryName = exploitPackage.ExploitPackageCategory.Name,
                BundleName = exploitPackage.Bundle.Name
            };

            return Json(exploitPackageForBookingViewModel);
        }

        // POST: ExploitPackages/GetHotels/5
        [HttpPost]
        public async Task<JsonResult> GetHotelsOfPackage(int id)
        {
            var exploitPackage = await _context.ExploitPackages
                .Include(m => m.Hotels)
                .FirstOrDefaultAsync(m => m.Id == id);

            var hotelForBookingViewModels = new List<HotelForBookingViewModel>();
            foreach (var hotel in exploitPackage.Hotels)
            {
                var hotelForBookingViewModel = new HotelForBookingViewModel
                {
                    Id = hotel.Id,
                    NameAddressAndDescription = hotel.NameAddressAndDescription,
                    HasSwimmingPool = hotel.HasSwimmingPool,
                    HasRoofTop = hotel.HasRoofTop,
                    HasTwentyFourSevenSupport = hotel.HasTwentyFourSevenSupport,
                    HasGymnasium = hotel.HasGymnasium,
                    HasMusicLounge = hotel.HasMusicLounge,
                    HasBar = hotel.HasBar,
                    HasKidsCorner = hotel.HasKidsCorner,
                    IsPetFriendly = hotel.IsPetFriendly,
                    HasFreeWifi = hotel.HasFreeWifi,
                    HasLaundry = hotel.HasLaundry,
                    HasRestaurant = hotel.HasRestaurant,
                    Room1Type = (hotel.Room1Type != null) ? hotel.Room1Type : "",
                    Room1FixedExpense = (hotel.Room1FixedExpense != null) ? hotel.Room1FixedExpense.ToString() : "",
                    Room1VariableExpense = (hotel.Room1VariableExpense != null) ? hotel.Room1VariableExpense.ToString() : "",
                    Room1Capacity = (hotel.Room1Capacity != null) ? hotel.Room1Capacity.ToString() : "",
                    Room1HasBalcony = hotel.Room1HasBalcony,
                    Room1HasWardrobe = hotel.Room1HasWardrobe,
                    Room1HasRoomService = hotel.Room1HasRoomService,
                    Room1HasTV = hotel.Room1HasTV,
                    Room1HasMarbleFloor = hotel.Room1HasMarbleFloor,
                    Room1HasSittingChair = hotel.Room1HasSittingChair,
                    Room1HasTelephone = hotel.Room1HasTelephone,
                    Room1HasDeluxBed = hotel.Room1HasDeluxBed,
                    Room2Type = (hotel.Room2Type != null) ? hotel.Room2Type : "",
                    Room2FixedExpense = (hotel.Room2FixedExpense != null) ? hotel.Room2FixedExpense.ToString() : "",
                    Room2VariableExpense = (hotel.Room2VariableExpense != null) ? hotel.Room2VariableExpense.ToString() : "",
                    Room2Capacity = (hotel.Room2Capacity != null) ? hotel.Room2Capacity.ToString() : "",
                    Room2HasBalcony = hotel.Room2HasBalcony,
                    Room2HasWardrobe = hotel.Room2HasWardrobe,
                    Room2HasRoomService = hotel.Room2HasRoomService,
                    Room2HasTV = hotel.Room2HasTV,
                    Room2HasMarbleFloor = hotel.Room2HasMarbleFloor,
                    Room2HasSittingChair = hotel.Room2HasSittingChair,
                    Room2HasTelephone = hotel.Room2HasTelephone,
                    Room2HasDeluxBed = hotel.Room2HasDeluxBed,
                    Room3Type = (hotel.Room3Type != null) ? hotel.Room3Type : "",
                    Room3FixedExpense = (hotel.Room3FixedExpense != null) ? hotel.Room3FixedExpense.ToString() : "",
                    Room3VariableExpense = (hotel.Room3VariableExpense != null) ? hotel.Room3VariableExpense.ToString() : "",
                    Room3Capacity = (hotel.Room3Capacity != null) ? hotel.Room3Capacity.ToString() : "",
                    Room3HasBalcony = hotel.Room3HasBalcony,
                    Room3HasWardrobe = hotel.Room3HasWardrobe,
                    Room3HasRoomService = hotel.Room3HasRoomService,
                    Room3HasTV = hotel.Room3HasTV,
                    Room3HasMarbleFloor = hotel.Room3HasMarbleFloor,
                    Room3HasSittingChair = hotel.Room3HasSittingChair,
                    Room3HasTelephone = hotel.Room3HasTelephone,
                    Room3HasDeluxBed = hotel.Room3HasDeluxBed
                };
                hotelForBookingViewModels.Add(hotelForBookingViewModel);
            }

            return Json(hotelForBookingViewModels);
        }

        // POST: ExploitPackages/GetSightsOfPackage/5
        [HttpPost]
        public async Task<JsonResult> GetSightsOfPackage(int id)
        {
            var exploitPackage = await _context.ExploitPackages
                .Include(m => m.Sights)
                .FirstOrDefaultAsync(m => m.Id == id);

            var sightForBookingViewModels = new List<SightForBookingViewModel>();
            foreach (var sight in exploitPackage.Sights)
            {
                var sightForBookingViewModel = new SightForBookingViewModel
                {
                    Id = sight.Id,
                    Name = sight.Name,
                    FixedExpense = (sight.FixedExpense != null) ? sight.FixedExpense.ToString() : "",
                    VariableExpense = (sight.VariableExpense != null) ? sight.VariableExpense.ToString() : "",
                    Capacity = (sight.Capacity != null) ? sight.Capacity.ToString() : "",
                    IsIncluded = sight.IsIncluded
                };
                sightForBookingViewModels.Add(sightForBookingViewModel);
            }

            return Json(sightForBookingViewModels);
        }

        // POST: ExploitPackages/GetActivitiesOfPackage/5
        [HttpPost]
        public async Task<JsonResult> GetActivitiesOfPackage(int id)
        {
            var exploitPackage = await _context.ExploitPackages
                .Include(m => m.Activities)
                .FirstOrDefaultAsync(m => m.Id == id);

            var activityForBookingViewModels = new List<ActivityForBookingViewModel>();
            foreach (var activity in exploitPackage.Activities)
            {
                var activityForBookingViewModel = new ActivityForBookingViewModel
                {
                    Id = activity.Id,
                    Name = activity.Name,
                    FixedExpense = (activity.FixedExpense != null) ? activity.FixedExpense.ToString() : "",
                    VariableExpense = (activity.VariableExpense != null) ? activity.VariableExpense.ToString() : "",
                    Capacity = (activity.Capacity != null) ? activity.Capacity.ToString() : "",
                    IsIncluded = activity.IsIncluded
                };
                activityForBookingViewModels.Add(activityForBookingViewModel);
            }

            return Json(activityForBookingViewModels);
        }

        // POST: ExploitPackages/GetTravelItinerariesOfPackage/5
        [HttpPost]
        public async Task<JsonResult> GetTravelItinerariesOfPackage(int id)
        {
            var exploitPackage = await _context.ExploitPackages
                .Include(m => m.TravelItineraries)
                .FirstOrDefaultAsync(m => m.Id == id);

            var travelItineraryForBookingViewModels = new List<TravelItineraryForBookingViewModel>();
            foreach (var travelItinerary in exploitPackage.TravelItineraries)
            {
                var travelItineraryForBookingViewModel = new TravelItineraryForBookingViewModel
                {
                    Id = travelItinerary.Id,
                    DepartureFrom = travelItinerary.DepartureFrom,
                    ArrivalAt = travelItinerary.ArrivalAt,
                    TransferType = travelItinerary.TransferType,
                    CheckInAt = travelItinerary.CheckInAt,
                    MealDescription = travelItinerary.MealDescription,
                    SightSeeing = travelItinerary.SightSeeing,
                    Activity = travelItinerary.Activity
                };
                travelItineraryForBookingViewModels.Add(travelItineraryForBookingViewModel);
            }

            return Json(travelItineraryForBookingViewModels);
        }

        // GET: ExploitPackages/Edit/5
        //public async Task<IActionResult> Edit(int? id)
        //{
        //    if (id == null)
        //    {
        //        return NotFound();
        //    }

        //    var exploitPackage = await _context.ExploitPackages.FirstOrDefaultAsync(m => m.Id == id);
        //    if (exploitPackage == null)
        //    {
        //        return NotFound();
        //    }
        //    //ViewData["AgentId"] = new SelectList(_context.Agents, "Id", "Name", exploitPackage.AgentId);
        //    ViewData["ExploitPackageCategoryId"] = new SelectList(_context.ExploitPackageCategories, "Id", "Name", exploitPackage.ExploitPackageCategoryId);
        //    ViewData["LocationId"] = new SelectList(_context.Locations, "Id", "Name", exploitPackage.LocationId);
        //    ViewData["RatingId"] = new SelectList(_context.Ratings, "Id", "Name", exploitPackage.RatingId);
        //    return View(exploitPackage);
        //}

        // POST: ExploitPackages/Edit/5
        //[HttpPost]
        //[ValidateAntiForgeryToken]
        //public async Task<IActionResult> Edit(int id, [Bind("Id,ExploitPackageCategoryId,LocationId,AgentId,RatingId,Name,PlaceName,DefaultPrice,Nights,Days,Note")] ExploitPackage exploitPackage)
        //{
        //    if (id != exploitPackage.Id)
        //    {
        //        return NotFound();
        //    }

        //    if (ModelState.IsValid)
        //    {
        //        try
        //        {
        //            _context.Update(exploitPackage);
        //            await _context.SaveChangesAsync();
        //        }
        //        catch (DbUpdateConcurrencyException)
        //        {
        //            if (!ExploitPackageExists(exploitPackage.Id))
        //            {
        //                return NotFound();
        //            }
        //            else
        //            {
        //                throw;
        //            }
        //        }
        //        return RedirectToAction(nameof(Index));
        //    }
        //    //ViewData["AgentId"] = new SelectList(_context.Agents, "Id", "Name", exploitPackage.AgentId);
        //    ViewData["ExploitPackageCategoryId"] = new SelectList(_context.ExploitPackageCategories, "Id", "Name", exploitPackage.ExploitPackageCategoryId);
        //    ViewData["LocationId"] = new SelectList(_context.Locations, "Id", "Name", exploitPackage.LocationId);
        //    ViewData["RatingId"] = new SelectList(_context.Ratings, "Id", "Name", exploitPackage.RatingId);
        //    return View(exploitPackage);
        //}

        // GET: ExploitPackages/Delete/5
        //public async Task<IActionResult> Delete(int? id)
        //{
        //    if (id == null)
        //    {
        //        return NotFound();
        //    }

        //    var exploitPackage = await _context.ExploitPackages
        //        .Include(e => e.Agent)
        //        .Include(e => e.ExploitPackageCategory)
        //        .Include(e => e.Location)
        //        .Include(e => e.Rating)
        //        .FirstOrDefaultAsync(m => m.Id == id);

        //    if (exploitPackage == null)
        //    {
        //        return NotFound();
        //    }

        //    return View(exploitPackage);
        //}

        // POST: ExploitPackages/Delete/5
        //[HttpPost, ActionName("Delete")]
        //[ValidateAntiForgeryToken]
        //public async Task<IActionResult> DeleteConfirmed(int id)
        //{
        //    var exploitPackage = await _context.ExploitPackages.FindAsync(id);
        //    _context.ExploitPackages.Remove(exploitPackage);
        //    await _context.SaveChangesAsync();
        //    return RedirectToAction(nameof(Index));
        //}

        private bool ExploitPackageExists(int id)
        {
            return _context.ExploitPackages.Any(e => e.Id == id);
        }
    }
}
