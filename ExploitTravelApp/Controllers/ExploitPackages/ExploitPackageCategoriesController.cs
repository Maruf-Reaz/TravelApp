using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using ExploitTravelApp.Data;
using ExploitTravelApp.Models.ExploitPackages;
using ExploitTravelApp.Service.ExploitPackages;
using Microsoft.AspNetCore.Authorization;
using ExploitTravelApp.Models.ExploitPackages.ViewModels;
using ExploitTravelApp.Models.Common.File;
using Microsoft.AspNetCore.Hosting;

namespace ExploitTravelApp.Controllers.ExploitPackages
{
    [Authorize]
    public class ExploitPackageCategoriesController : Controller
    {
        private readonly ExploitPackageCategoryService _service;
        private readonly IHostingEnvironment _hostingEnvironment;

        public ExploitPackageCategoriesController(ExploitPackageCategoryService service, IHostingEnvironment hostingEnvironment)
        {
            _service = service;
            _hostingEnvironment = hostingEnvironment;
        }

        // GET: ExploitPackageCategories
        [Authorize(Roles = "Admin,Agent")]
        public async Task<IActionResult> Index()
        {
            var exploitPackageCategories = await _service.GetAll();
            return View(exploitPackageCategories);
        }

        // GET: ExploitPackageCategories/Details/5
        [Authorize(Roles = "Admin,Agent")]
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var exploitPackageCategory = await _service.GetById(Convert.ToInt32(id));
            if (exploitPackageCategory == null)
            {
                return NotFound();
            }

            return View(exploitPackageCategory);
        }

        // GET: ExploitPackageCategories/Create
        [Authorize(Roles = "Admin")]
        public IActionResult Create()
        {
            return View();
        }

        // POST: ExploitPackageCategories/Create
        [Authorize(Roles = "Admin")]
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create(ExploitPackageCategoryViewModel exploitPackageCategoryViewModel)
        {
            if (ModelState.IsValid)
            {
                string photo = "No File";
                if (exploitPackageCategoryViewModel.Photo != null)
                {
                    string uniqueFileName = null;
                    string stringCutted = exploitPackageCategoryViewModel.Photo.FileName.Split('.').Last();
                    uniqueFileName = Guid.NewGuid().ToString() + "." + stringCutted;
                    photo = uniqueFileName;
                    InputFile fileUpload = new InputFile(_hostingEnvironment);
                    fileUpload.Uploadfile("files/exploit_package_categories", exploitPackageCategoryViewModel.Photo, photo);
                }

                var exploitPackageCategory = new ExploitPackageCategory
                {
                    Name = exploitPackageCategoryViewModel.Name,
                    PhotoName = photo
                };

                var result = await _service.CreateExploitPackageCategory(exploitPackageCategory);
                if (result == 1)
                {
                    return RedirectToAction(nameof(Index));
                }
                else
                {
                    return NotFound();
                }
            }
            return View(exploitPackageCategoryViewModel);
        }

        // GET: ExploitPackageCategories/Edit/5
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var exploitPackageCategory = await _service.GetById(Convert.ToInt32(id));
            if (exploitPackageCategory == null)
            {
                return NotFound();
            }

            var exploitPackageCategoryViewModel = new ExploitPackageCategoryViewModel
            {
                Id = exploitPackageCategory.Id,
                Name = exploitPackageCategory.Name,
                OldPhotoName = exploitPackageCategory.PhotoName
            };

            return View(exploitPackageCategoryViewModel);
        }

        // POST: ExploitPackageCategories/Edit/5
        [Authorize(Roles = "Admin")]
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, ExploitPackageCategoryViewModel exploitPackageCategoryViewModel)
        {
            if (id != exploitPackageCategoryViewModel.Id)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                InputFile fileUpload = new InputFile(_hostingEnvironment);
                var exploitPackageCategory = new ExploitPackageCategory
                {
                    Id = exploitPackageCategoryViewModel.Id,
                    Name = exploitPackageCategoryViewModel.Name,
                    PhotoName = exploitPackageCategoryViewModel.OldPhotoName
                };
                if (exploitPackageCategoryViewModel.Photo != null)
                {
                    string uniqueFileName = null;
                    string stringCutted = exploitPackageCategoryViewModel.Photo.FileName.Split('.').Last();
                    uniqueFileName = Guid.NewGuid().ToString() + "." + stringCutted;
                    exploitPackageCategory.PhotoName = uniqueFileName;
                    if (exploitPackageCategoryViewModel.OldPhotoName.ToLower() == "no file")
                    {
                        fileUpload.Uploadfile("files/exploit_package_categories", exploitPackageCategoryViewModel.Photo, uniqueFileName);
                    }
                    else
                    {
                        fileUpload.Updatefile("files/exploit_package_categories", exploitPackageCategoryViewModel.Photo, exploitPackageCategoryViewModel.OldPhotoName, uniqueFileName);
                    }
                }

                try
                {
                    await _service.EditExploitPackageCategory(exploitPackageCategory);
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!_service.ExploitPackageCategoryExists(exploitPackageCategory.Id))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
                return RedirectToAction(nameof(Index));
            }
            return View(exploitPackageCategoryViewModel);
        }

        //// GET: ExploitPackageCategories/Delete/5
        //public async Task<IActionResult> Delete(int? id)
        //{
        //    if (id == null)
        //    {
        //        return NotFound();
        //    }

        //    var exploitPackageCategory = await _context.ExploitPackageCategories
        //        .FirstOrDefaultAsync(m => m.Id == id);
        //    if (exploitPackageCategory == null)
        //    {
        //        return NotFound();
        //    }

        //    return View(exploitPackageCategory);
        //}

        //// POST: ExploitPackageCategories/Delete/5
        //[HttpPost, ActionName("Delete")]
        //[ValidateAntiForgeryToken]
        //public async Task<IActionResult> DeleteConfirmed(int id)
        //{
        //    var exploitPackageCategory = await _context.ExploitPackageCategories.FindAsync(id);
        //    _context.ExploitPackageCategories.Remove(exploitPackageCategory);
        //    await _context.SaveChangesAsync();
        //    return RedirectToAction(nameof(Index));
        //}

        //private bool ExploitPackageCategoryExists(int id)
        //{
        //    return _context.ExploitPackageCategories.Any(e => e.Id == id);
        //}
    }
}
