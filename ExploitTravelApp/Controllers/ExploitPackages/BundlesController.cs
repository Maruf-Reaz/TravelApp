using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using ExploitTravelApp.Data;
using ExploitTravelApp.Models.ExploitPackages;
using Microsoft.AspNetCore.Authorization;
using ExploitTravelApp.Models.ExploitPackages.ViewModels;
using ExploitTravelApp.Models.Common.File;
using Microsoft.AspNetCore.Hosting;

namespace ExploitTravelApp.Controllers.ExploitPackages
{
    [Authorize]
    public class BundlesController : Controller
    {
        private readonly ApplicationDbContext _context;
        private readonly IHostingEnvironment _hostingEnvironment;

        public BundlesController(ApplicationDbContext context, IHostingEnvironment hostingEnvironment)
        {
            _context = context;
            _hostingEnvironment = hostingEnvironment;
        }

        // GET: Bundles
        [Authorize(Roles = "Admin,Agent")]
        public async Task<IActionResult> Index()
        {
            return View(await _context.Bundles.ToListAsync());
        }

        // GET: Bundles/Details/5
        [Authorize(Roles = "Admin,Agent")]
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var bundle = await _context.Bundles
                .FirstOrDefaultAsync(m => m.Id == id);
            if (bundle == null)
            {
                return NotFound();
            }

            return View(bundle);
        }

        // GET: Bundles/Create
        [Authorize(Roles = "Admin")]
        public IActionResult Create()
        {
            return View();
        }

        // POST: Bundles/Create
        [Authorize(Roles = "Admin")]
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create(BundleViewModel bundleViewModel)
        {
            if (ModelState.IsValid)
            {
                string photo = "No File";
                if (bundleViewModel.Photo != null)
                {
                    string uniqueFileName = null;
                    string stringCutted = bundleViewModel.Photo.FileName.Split('.').Last();
                    uniqueFileName = Guid.NewGuid().ToString() + "." + stringCutted;
                    photo = uniqueFileName;
                    InputFile fileUpload = new InputFile(_hostingEnvironment);
                    fileUpload.Uploadfile("files/bundle_images", bundleViewModel.Photo, photo);
                }

                var bundle = new Bundle
                {
                    Name = bundleViewModel.Name,
                    PhotoName = photo
                };

                _context.Add(bundle);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }
            return View(bundleViewModel);
        }

        // GET: Bundles/Edit/5
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var bundle = await _context.Bundles.FirstOrDefaultAsync(m => m.Id == id);
            if (bundle == null)
            {
                return NotFound();
            }

            var bundleViewModel = new BundleViewModel
            {
                Id = bundle.Id,
                Name = bundle.Name,
                OldPhotoName = bundle.PhotoName
            };

            return View(bundleViewModel);
        }

        // POST: Bundles/Edit/5
        [Authorize(Roles = "Admin")]
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, BundleViewModel bundleViewModel)
        {
            if (id != bundleViewModel.Id)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                InputFile fileUpload = new InputFile(_hostingEnvironment);
                var bundle = new Bundle
                {
                    Id = bundleViewModel.Id,
                    Name = bundleViewModel.Name,
                    PhotoName = bundleViewModel.OldPhotoName
                };
                if (bundleViewModel.Photo != null)
                {
                    string uniqueFileName = null;
                    string stringCutted = bundleViewModel.Photo.FileName.Split('.').Last();
                    uniqueFileName = Guid.NewGuid().ToString() + "." + stringCutted;
                    bundle.PhotoName = uniqueFileName;
                    if (bundleViewModel.OldPhotoName.ToLower() == "no file")
                    {
                        fileUpload.Uploadfile("files/bundle_images", bundleViewModel.Photo, uniqueFileName);
                    }
                    else
                    {
                        fileUpload.Updatefile("files/bundle_images", bundleViewModel.Photo, bundleViewModel.OldPhotoName, uniqueFileName);
                    }
                }

                try
                {
                    _context.Update(bundle);
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!BundleExists(bundle.Id))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
                return RedirectToAction(nameof(Index));
            }
            return View(bundleViewModel);
        }

        // GET: Bundles/Delete/5
        //public async Task<IActionResult> Delete(int? id)
        //{
        //    if (id == null)
        //    {
        //        return NotFound();
        //    }

        //    var bundle = await _context.Bundles
        //        .FirstOrDefaultAsync(m => m.Id == id);
        //    if (bundle == null)
        //    {
        //        return NotFound();
        //    }

        //    return View(bundle);
        //}

        // POST: Bundles/Delete/5
        //[HttpPost, ActionName("Delete")]
        //[ValidateAntiForgeryToken]
        //public async Task<IActionResult> DeleteConfirmed(int id)
        //{
        //    var bundle = await _context.Bundles.FindAsync(id);
        //    _context.Bundles.Remove(bundle);
        //    await _context.SaveChangesAsync();
        //    return RedirectToAction(nameof(Index));
        //}

        private bool BundleExists(int id)
        {
            return _context.Bundles.Any(e => e.Id == id);
        }
    }
}
