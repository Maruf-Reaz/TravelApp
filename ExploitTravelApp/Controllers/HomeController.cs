using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using ExploitTravelApp.Models;
using Microsoft.AspNetCore.Authorization;
using ExploitTravelApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Identity;
using ExploitTravelApp.Models.Common.Authentication;

namespace ExploitTravelApp.Controllers
{
    public class HomeController : Controller
    {
        private readonly ApplicationDbContext _context;
        private readonly UserManager<ApplicationUser> _userManager;

        public HomeController(ApplicationDbContext context, UserManager<ApplicationUser> userManager)
        {
            _context = context;
            _userManager = userManager;
        }

        public async Task<IActionResult> Index()
        {
            var bundles = await _context.Bundles.ToListAsync();
            var locations = await _context.Locations.ToListAsync();
            var exploitPackageCategories = await _context.ExploitPackageCategories.ToListAsync();
            var exploitPackages = await _context.ExploitPackages.Where(m => m.Status == 1)
                .Include(m => m.Bundle).Include(m => m.ExploitPackageCategory)
                .Include(m => m.Location).Include(m => m.Agent)
                .Include(m => m.Hotels)
                .Include(m => m.Sights)
                .Include(m => m.Activities)
                .OrderByDescending(m => m.Id).Take(3)
                .ToListAsync();
            var videos = await _context.Videos.ToListAsync();
            var blogs = await _context.Blogs.OrderByDescending(m => m.Id).Take(3).ToListAsync();
            var quotes = await _context.Quotes.Include(m => m.Visitor).OrderByDescending(m => m.Id).Take(3).ToListAsync();
            ViewData["Bundles"] = bundles;
            ViewData["Locations"] = locations;
            ViewData["ExploitPackageCategories"] = exploitPackageCategories;
            ViewData["ExploitPackages"] = exploitPackages;
            ViewData["Videos"] = videos;
            ViewData["Blogs"] = blogs;
            ViewData["Quotes"] = quotes;
            return View();
        }

        public IActionResult Demo()
        {
            return View();
        }

        public IActionResult PageOne()
        {
            return View();
        }

        //Corresponding to PageOne
        public async Task<IActionResult> AllPackages(int? locationId, int? bundleId, int? exploitPackageCategoryId)
        {
            if (locationId == null && bundleId == null && exploitPackageCategoryId == null)
            {
                var exploitPackages = await _context.ExploitPackages.Where(m => m.Status == 1)
                .Include(m => m.Bundle).Include(m => m.ExploitPackageCategory)
                .Include(m => m.Location).Include(m => m.Agent)
                .Include(m => m.Hotels)
                .Include(m => m.Sights)
                .Include(m => m.Activities)
                .ToListAsync();
                ViewData["ExploitPackages"] = exploitPackages;
            }
            else
            {
                var exploitPackagesWithParameter = await _context.ExploitPackages
                .Where(m => m.Status == 1 && (m.LocationId == locationId || m.BundleId == bundleId || m.ExploitPackageCategoryId == exploitPackageCategoryId))
                .Include(m => m.Bundle).Include(m => m.ExploitPackageCategory)
                .Include(m => m.Location).Include(m => m.Agent)
                .Include(m => m.Hotels)
                .Include(m => m.Sights)
                .Include(m => m.Activities)
                .ToListAsync();

                if (exploitPackagesWithParameter.Count == 0)
                {
                    var exploitPackagesWithoutParameter = await _context.ExploitPackages.Where(m => m.Status == 1)
                        .Include(m => m.Bundle).Include(m => m.ExploitPackageCategory)
                        .Include(m => m.Location).Include(m => m.Agent)
                        .Include(m => m.Hotels)
                        .Include(m => m.Sights)
                        .Include(m => m.Activities)
                        .ToListAsync();
                    ViewData["ExploitPackages"] = exploitPackagesWithoutParameter;
                }
                else
                {
                    ViewData["ExploitPackages"] = exploitPackagesWithParameter;
                }
            }

            var bundles = await _context.Bundles.ToListAsync();
            var exploitPackageCategories = await _context.ExploitPackageCategories.ToListAsync();
            ViewData["Bundles"] = bundles;
            ViewData["ExploitPackageCategories"] = exploitPackageCategories;
            ViewData["BundleId"] = bundleId;
            ViewData["ExploitPackageCategoryId"] = exploitPackageCategoryId;

            return View();
        }

        public IActionResult PageTwo()
        {
            return View();
        }

        //Corresponding to PageTwo
        public async Task<IActionResult> PackageDetails(int packageId)
        {
            var exploitPackage = await _context.ExploitPackages.Where(m => m.Id == packageId)
                .Include(m => m.Bundle).Include(m => m.ExploitPackageCategory)
                .Include(m => m.Location).Include(m => m.Agent)
                .Include(m => m.Hotels)
                .Include(m => m.Sights)
                .Include(m => m.Activities)
                .Include(m => m.TravelItineraries)
                .FirstOrDefaultAsync();

            if (exploitPackage == null)
            {
                return NotFound();
            }

            return View(exploitPackage);
        }

        [Authorize]
        [Route("/Backpanel")]
        [Route("Home/Backpanel")]
        public async Task<IActionResult> Backpanel()
        {
            var exploitPackages = await _context.ExploitPackages.Where(m => m.Status == 1)
                .Include(m => m.Bundle).Include(m => m.ExploitPackageCategory)
                .Include(m => m.Location).Include(m => m.Agent).ToListAsync();
            var approvedAgents = _userManager.Users.Include(m => m.UserCategory).Where(m => m.UserCategoryId == 2 && m.AgentStatus == 1);
            ViewData["ExploitPackages"] = exploitPackages;
            ViewData["ApprovedAgents"] = approvedAgents;
            return View();
        }

        //[Route("/Home/Error/{statusCode}")]
        //public IActionResult Error(int statusCode)
        //{
        //    switch (statusCode)
        //    {
        //        case 404:
        //            ViewBag.ErrorMessage = "Sorry, the resource you requested could not be found.";
        //            break;

        //        case 403:
        //            ViewBag.ErrorMessage = "Sorry, the resource you requested is denied.";
        //            break;

        //    }
        //    return View();
        //    //return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
        //}

        public IActionResult Privacy()
        {
            return View();
        }

        public IActionResult AccessDenied()
        {
            return View();
        }

        public IActionResult AllVideos()
        {
            return View();
        }

        public async Task<IActionResult> AllBlogs()
        {
            var blogs = await _context.Blogs.OrderByDescending(m => m.Id).Include(m => m.Visitor).ToListAsync();
            return View(blogs);
        }

        public async Task<IActionResult> BlogDetails(int blogId)
        {
            var blog = await _context.Blogs.Where(m => m.Id == blogId)
                .Include(m => m.Visitor)
                .FirstOrDefaultAsync();

            if (blog == null)
            {
                return NotFound();
            }

            return View(blog);
        }

        public IActionResult Blog()
        {
            return View();
        }

        [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
        public IActionResult Error()
        {
            return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
        }
    }
}
